
 ╔══════════════════════════════════════╗
 ║ Установка виртуального окружения     ║
 ║ ==================================== ║
 ║ # Windows                            ║
 ║ python -m venv venv                  ║
 ║                                      ║
 ║ # Linux                              ║
 ║ python3 -m venv venv                 ║
 ║                                      ║
 ║ Активация виртуального окружения     ║
 ║ ==================================== ║
 ║ # Windows                            ║
 ║ .\venv\Scripts\activate              ║
 ║                                      ║
 ║ # Linux                              ║
 ║ source venv/bin/activate             ║
 ║                                      ║
 ║ Деактивация виртуального окружения   ║
 ║ ==================================== ║
 ║ # Windows                            ║
 ║ deactivate                           ║
 ╚══════════════════════════════════════╝


         python -m venv venv
		             ↑    ↑
					 |    |
            модуль для    название
             создания     виртуального
           виртуального   окружения
            окружения

Когда Мы устанавливаем пакет обычным способом (pip install pakage), он устанавливается в ГЛОБАЛЬНОЕ ПРОСТРАНСТВО.
Команда "pip list" покажет список установленных пакетов именно в глобальном пространстве.
В python есть возможность создать "ВИРТУАЛЬНОЕ ОКРУЖЕНИЕ", это изолированная среда (их можно создавать несколько) в которой можно устанавливать определенные пакеты различных версий (если несколько виртуальных окружений), внутри окружения работать, эксперементировать, проверять какой то модуль. При таком методе работы не будет конфликтов зависимостей.
И главное: ОСНОВНОЙ PYTHON БУДЕТ ЧИСТЫЙ. Это хорошая практика!